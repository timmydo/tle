(in-package :tle)

(defclass mode ()
  ()
  (:documentation "Base class for editor modes."))

(defgeneric handle-key (mode editor key ctrl alt shift meta)
  (:documentation "Handle a key event. Returns T if handled, NIL if not handled."))

(defclass normal-mode (mode)
  ()
  (:documentation "Normal editing mode with standard key bindings."))

(defmethod handle-key ((mode normal-mode) editor key ctrl alt shift meta)
  "Handle key input for normal editing mode."
  (let ((buffer (current-buffer editor)))
    (when buffer
      (cond
        ;; Arrow keys
        ((string= key "ArrowUp")
         (previous-line buffer)
         (format t "Moved cursor up~%")
         t)
        ((string= key "ArrowDown") 
         (next-line buffer)
         (format t "Moved cursor down~%")
         t)
        ((string= key "ArrowLeft")
         (backward-char buffer)
         (format t "Moved cursor left~%")
         t)
        ((string= key "ArrowRight")
         (forward-char buffer)
         (format t "Moved cursor right~%")
         t)
        
        ;; Home and End keys
        ((string= key "Home")
         (beginning-of-line buffer)
         (format t "Home: Moved cursor to beginning of line~%")
         t)
        ((string= key "End")
         (end-of-line buffer)
         (format t "End: Moved cursor to end of line~%")
         t)
        
        ;; Page Up and Page Down keys
        ((string= key "PageUp")
         (page-up buffer)
         (format t "PageUp: Moved cursor up one page~%")
         t)
        ((string= key "PageDown")
         (page-down buffer)
         (format t "PageDown: Moved cursor down one page~%")
         t)
        
        ;; Ctrl key combinations
        ((and ctrl (string= key "p"))
         (previous-line buffer)
         (format t "Ctrl-P: Moved cursor up~%")
         t)
        ((and ctrl (string= key "n"))
         (next-line buffer)
         (format t "Ctrl-N: Moved cursor down~%")
         t)
        ((and ctrl (string= key "b"))
         (backward-char buffer)
         (format t "Ctrl-B: Moved cursor left~%")
         t)
        ((and ctrl (string= key "f"))
         (forward-char buffer)
         (format t "Ctrl-F: Moved cursor right~%")
         t)
        ((and ctrl (string= key "g"))
         (keyboard-quit buffer)
         (format t "Ctrl-G: Keyboard quit - cleared mark~%")
         t)
        ((and ctrl (string= key "a"))
         (beginning-of-line buffer)
         (format t "Ctrl-A: Moved cursor to beginning of line~%")
         t)
        ((and ctrl (string= key "e"))
         (end-of-line buffer)
         (format t "Ctrl-E: Moved cursor to end of line~%")
         t)
        ((and ctrl (string= key " "))
         (let ((point (buffer-get-point buffer)))
           (buffer-set-mark buffer (first point) (second point)))
         (format t "Ctrl-Space: Set mark at current position~%")
         t)
        ((and ctrl (string= key "_"))
         (if (buffer-undo buffer)
             (format t "Ctrl-_: Undo operation performed~%")
             (format t "Ctrl-_: Nothing to undo~%"))
         t)
        ((and ctrl (string= key "?"))
         (if (buffer-redo buffer)
             (format t "Ctrl-?: Redo operation performed~%")
             (format t "Ctrl-?: Nothing to redo~%"))
         t)
        ((and ctrl (string= key "s"))
         (save-buffer-command editor)
         (format t "Ctrl-S: Save buffer~%")
         t)
        ((and ctrl (string= key "o"))
         (activate-minibuffer editor "Load file: " nil 
                              (lambda (file-path editor)
                                (load-file-command file-path editor)))
         (format t "Ctrl-O: Load file~%")
         t)
        ((and ctrl meta (string= key "s"))
         (activate-minibuffer editor "Search: " nil 'search-forward-command)
         (format t "Ctrl-Meta-S: Search forward~%")
         t)
        ((and ctrl (string= key "r"))
         (activate-minibuffer editor "Search backward: " nil 'search-backward-command)
         (format t "Ctrl-R: Search backward~%")
         t)
        ((and ctrl meta (string= key "r"))
         (revert-file-command editor)
         (format t "Ctrl-Meta-R: Revert file~%")
         t)
        ((and ctrl (string= key "i"))
         (start-isearch-forward editor)
         (format t "Ctrl-I: Incremental search forward~%")
         t)
        ((and ctrl shift (string= key "I"))
         (start-isearch-backward editor)
         (format t "Ctrl-Shift-I: Incremental search backward~%")
         t)
        ((and ctrl (string= key "k"))
         (kill-line buffer)
         (format t "Ctrl-K: Kill line~%")
         t)
        ((and ctrl shift (string= key "K"))
         (kill-whole-line buffer)
         (format t "Ctrl-Shift-K: Kill whole line~%")
         t)
        ((and ctrl (string= key "d"))
         (kill-word buffer)
         (format t "Ctrl-D: Kill word~%")
         t)
        ((and ctrl shift (string= key "D"))
         (delete-region buffer)
         (format t "Ctrl-Shift-D: Delete region~%")
         t)
        ((and alt (string= key "Backspace"))
         (backward-kill-word buffer)
         (format t "Alt-Backspace: Backward kill word~%")
         t)
        ((and ctrl (string= key "x"))
         (kill-region buffer)
         (format t "Ctrl-X: Kill region~%")
         t)
        ((and ctrl (string= key "c"))
         (copy-region-as-kill buffer)
         (format t "Ctrl-C: Copy region as kill~%")
         t)
        ((and ctrl (string= key "v"))
         (yank buffer)
         (format t "Ctrl-V: Yank from kill ring~%")
         t)
        ((and ctrl (string= key "q"))
         ;; Quit without prompting
         (format t "Ctrl-Q: Quitting TLE...~%")
         (quit-tle)
         t)
        ((and alt (string= key "v"))
         (yank-pop buffer)
         (format t "Alt-V: Yank pop (cycle kill ring)~%")
         t)
        ((and alt (string= key "f"))
         (forward-word buffer)
         (format t "Alt-F: Forward word~%")
         t)
        ((and alt (string= key "b"))
         (backward-word buffer)
         (format t "Alt-B: Backward word~%")
         t)
        ((and alt (string= key "x"))
         (execute-command editor)
         (format t "Alt-X: Execute command~%")
         t)
        ((and alt (string= key "a"))
         (move-beginning-of-line buffer)
         (format t "Alt-A: Smart move to beginning of line~%")
         t)
        ((and alt shift (string= key "B"))
         (beginning-of-word buffer)
         (format t "Alt-Shift-B: Beginning of word~%")
         t)
        ((and alt shift (string= key "E"))
         (end-of-word buffer)
         (format t "Alt-Shift-E: End of word~%")
         t)
        ((and alt (string= key "<"))
         (beginning-of-buffer buffer)
         (format t "Alt-<: Move to beginning of buffer~%")
         t)
        ((and alt (string= key ">"))
         (end-of-buffer buffer)
         (format t "Alt->: Move to end of buffer~%")
         t)
        ((and alt (string= key "g"))
         (prompt-goto-line editor)
         (format t "Alt-g: Prompt for goto line~%")
         t)
        ((and alt (string= key "%"))
         (start-query-replace editor)
         (format t "Alt-%: Query replace~%")
         t)
        ((and ctrl alt (string= key "w"))
         (activate-minibuffer editor "Save buffer as: " nil 
                              (lambda (file-path editor)
                                (let ((buffer (current-buffer editor)))
                                  (when buffer
                                    (save-buffer-as buffer (string-trim " " file-path))))))
         (format t "Ctrl-Alt-W: Save buffer as (C-x C-w equivalent)~%")
         t)
        
        ;; Enter key for newline insertion
        ((string= key "Enter")
         (insert-newline buffer)
         (format t "Inserted newline~%")
         t)
        
        ;; Delete key for character deletion
        ((string= key "Delete")
         (delete-char buffer)
         (format t "Deleted character at point~%")
         t)
        
        ;; Backspace key for backward character deletion
        ((string= key "Backspace")
         (delete-backward-char buffer)
         (format t "Deleted character before point~%")
         t)
        
        ;; Printable characters (single character keys that are not special)
        ((and (= (length key) 1)
              (not ctrl)
              (not alt)
              (graphic-char-p (char key 0)))
         (insert-char buffer (char key 0))
         (format t "Inserted character: ~A~%" key)
         t)
        
        ;; Return NIL if key was not handled
        (t nil)))))

(defun make-normal-mode ()
  "Create a new normal mode instance."
  (make-instance 'normal-mode))